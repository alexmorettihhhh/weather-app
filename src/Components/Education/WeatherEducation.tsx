import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Article, WeatherPhenomenon } from '../../types/education';
import './WeatherEducation.css';

interface Tab {
  id: string;
  label: string;
  icon: string;
}

const tabs: Tab[] = [
  { id: 'articles', label: '–°—Ç–∞—Ç—å–∏', icon: 'üìö' },
  { id: 'phenomena', label: '–ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è', icon: 'üåà' },
  { id: 'interactive', label: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤', icon: 'üéÆ' },
  { id: 'quizzes', label: '–í–∏–∫—Ç–æ—Ä–∏–Ω—ã', icon: '‚ùì' },
  { id: 'kids', label: '–î–µ—Ç—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª', icon: 'üé®' },
  { id: 'facts', label: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã', icon: 'üí°' },
  { id: 'climate', label: '–ö–ª–∏–º–∞—Ç', icon: 'üåç' },
];

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
const weatherPhenomena: WeatherPhenomenon[] = [
  {
    id: '1',
    name: '–ì—Ä–æ–∑–∞',
    description: '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ —Å –º–æ–ª–Ω–∏—è–º–∏ –∏ –≥—Ä–æ–º–æ–º',
    explanation: '–°–ª–æ–∂–Ω–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤ –∫—É—á–µ–≤–æ-–¥–æ–∂–¥–µ–≤—ã—Ö –æ–±–ª–∞–∫–∞—Ö –∏ –º–µ–∂–¥—É –æ–±–ª–∞–∫–∞–º–∏ –∏ –∑–µ–º–ª–µ–π –≤–æ–∑–Ω–∏–∫–∞—é—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä—è–¥—ã ‚Äî –º–æ–ª–Ω–∏–∏, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º—ã–µ –≥—Ä–æ–º–æ–º.',
    causes: [
      '–í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç–µ–ø–ª–æ–≥–æ –∏ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞',
      '–ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç –Ω–∞–≥—Ä–µ—Ç—å –≤–æ–∑–¥—É—Ö –¥–æ 30,000¬∞C',
      '–ì—Ä–æ–º - —ç—Ç–æ –∑–≤—É–∫–æ–≤–∞—è –≤–æ–ª–Ω–∞ –æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞',
      '–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—Ä–æ–∑—ã - 30 –º–∏–Ω—É—Ç'
    ],
    effects: [
      '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä—è–¥—ã',
      '–°–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏',
      '–®–∫–≤–∞–ª–∏—Å—Ç—ã–π –≤–µ—Ç–µ—Ä',
      '–í–æ–∑–º–æ–∂–Ω—ã–π –≥—Ä–∞–¥'
    ]
  },
  {
    id: '2',
    name: '–†–∞–¥—É–≥–∞',
    description: '–û–ø—Ç–∏—á–µ—Å–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ',
    explanation: '–û–ø—Ç–∏—á–µ—Å–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏–µ–º –∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –≤ –≤–æ–¥—è–Ω—ã—Ö –∫–∞–ø–ª—è—Ö.',
    causes: [
      '–ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –≤ –∫–∞–ø–ª—è—Ö –≤–æ–¥—ã',
      '–í—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Å–µ–º—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤',
      '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–∞–¥—É–≥—É',
      '–†–∞–¥—É–≥–∞ - —ç—Ç–æ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥, –Ω–æ –º—ã –≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —á–∞—Å—Ç—å'
    ],
    effects: [
      '–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –Ω–∞ —Å–ø–µ–∫—Ç—Ä',
      '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏—á–µ—Å–∫–æ–π –∏–ª–ª—é–∑–∏–∏',
      '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–æ–π–Ω–æ–π —Ä–∞–¥—É–≥–∏'
    ]
  }
];

const WeatherEducation: React.FC = () => {
  const [activeTab, setActiveTab] = useState<string>('phenomena');
  const [articles, setArticles] = useState<Article[]>([]);

  useEffect(() => {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    loadMockData();
  }, []);

  const loadMockData = () => {
    setArticles([
      {
        id: '1',
        title: '–ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –æ–±–ª–∞–∫–∞',
        content: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞–∫–æ–≤ –∏ –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è...',
        category: 'meteorology',
        difficulty: 'beginner',
        tags: ['–æ–±–ª–∞–∫–∞', '–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è'],
        createdAt: new Date(),
        updatedAt: new Date(),
      }
    ]);
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'phenomena':
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="weather-phenomena"
          >
            {weatherPhenomena.map(phenomenon => (
              <PhenomenonCard key={phenomenon.id} phenomenon={phenomenon} />
            ))}
          </motion.div>
        );
      case 'articles':
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="education-articles"
          >
            {articles.map(article => (
              <ArticleCard key={article.id} article={article} />
            ))}
          </motion.div>
        );
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
      default:
        return (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="coming-soon"
          >
            <h3>–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
            <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!</p>
          </motion.div>
        );
    }
  };

  return (
    <div className="weather-education">
      <nav className="education-tabs">
        {tabs.map(tab => (
          <motion.button
            key={tab.id}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="tab-icon">{tab.icon}</span>
            {tab.label}
          </motion.button>
        ))}
      </nav>

      <AnimatePresence mode="wait">
        {renderContent()}
      </AnimatePresence>

      <motion.div 
        className="education-footer"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5 }}
      >
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="scroll-top-button"
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        >
          ‚Üë –ù–∞–≤–µ—Ä—Ö
        </motion.button>
      </motion.div>
    </div>
  );
};

interface ArticleCardProps {
  article: Article;
}

const ArticleCard: React.FC<ArticleCardProps> = ({ article }) => {
  return (
    <motion.div
      className="article-card interactive-element"
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
    >
      {article.imageUrl && (
        <img src={article.imageUrl} alt={article.title} className="article-image" />
      )}
      <div className="article-content">
        <h3>{article.title}</h3>
        <div className="article-meta">
          <span className="article-category">{article.category}</span>
          <span className="article-difficulty">{article.difficulty}</span>
        </div>
        <p>{article.content.substring(0, 150)}...</p>
        <div className="article-tags">
          {article.tags.map(tag => (
            <span key={tag} className="tag">#{tag}</span>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

interface PhenomenonCardProps {
  phenomenon: WeatherPhenomenon;
}

const PhenomenonCard: React.FC<PhenomenonCardProps> = ({ phenomenon }) => {
  return (
    <motion.div
      className="phenomenon-card interactive-element"
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
    >
      {phenomenon.imageUrl && (
        <img src={phenomenon.imageUrl} alt={phenomenon.name} className="phenomenon-image" />
      )}
      <div className="phenomenon-content">
        <h3>{phenomenon.name}</h3>
        <p className="phenomenon-description">{phenomenon.description}</p>
        <div className="phenomenon-details">
          <h4>–ü—Ä–∏—á–∏–Ω—ã:</h4>
          <ul>
            {phenomenon.causes.map((cause, index) => (
              <li key={index}>{cause}</li>
            ))}
          </ul>
          <h4>–≠—Ñ—Ñ–µ–∫—Ç—ã:</h4>
          <ul>
            {phenomenon.effects.map((effect, index) => (
              <li key={index}>{effect}</li>
            ))}
          </ul>
        </div>
      </div>
    </motion.div>
  );
};

export default WeatherEducation; 